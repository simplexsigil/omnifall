/**
 * Minified by jsDelivr using Terser v5.17.1.
 * Original file: /npm/prismjs-bibtex@2.1.0/prism-bibtex.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function (e) { var n = { pattern: /\\(?:\ |[^a-z@\s]|[a-z@]+\*?)/i }, a = { equation: { pattern: /(\$\$?)[^\$]+\1/m, alias: "function", inside: n }, keyword: n }; e.languages.bib = { comment: /%.*/, special: { pattern: /(^\s*)@(?:preamble|string|comment(?=\s*[({]))/im, lookbehind: !0, alias: "important" }, "class-name": { pattern: /(^\s*)@[a-z]+(?=\s*{)/im, lookbehind: !0 }, key: { pattern: /([,{]\s*)[^,={}'"\s]+(?=\s*[,}])/im, lookbehind: !0, alias: "regex" }, property: { pattern: /([,{(]\s*)[^,={}'"\s]+(?=\s*=)/im, lookbehind: !0 }, string: { pattern: /([=#{}]\s*)(?:\d+|("|')(?:(?!\2)[^\\]|\\.)*\2|{(?:(?:{(?:(?:{(?:(?:{(?:[^{}])*})|(?:[^{}]))*})|(?:[^{}]))*})|(?:[^{}]))*})/im, lookbehind: !0, greedy: !0, inside: a }, constant: { pattern: /([=#]\s*)[^,={}'"\s]+(?=\s*[#,}])/im, lookbehind: !0 }, symbol: /#/, punctuation: /[=,{}()]/ }, e.languages.bibtex = e.languages.bib }(Prism);